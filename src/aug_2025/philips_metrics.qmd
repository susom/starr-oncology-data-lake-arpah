---
title: "Philips ISPM"
execute:
  echo: false
---
```{r, message=FALSE, warning=FALSE, results='hide'}
#| context: global

rm(list=ls())
source("/workspaces/starr-oncology-data-lake-arpah/src/R/all_function.R", encoding = "UTF-8")
yaml_file_path <-  "/workspaces/starr-oncology-data-lake-arpah/src/aug_2025/sql_params.yml"
library(RColorBrewer)  
library(plotly)
library(DT)
```

```{r, message=FALSE, warning=FALSE, results='hide'}
philips_den_sql<- "/workspaces/starr-oncology-data-lake-arpah/src/aug_2025/sql/philips/philips_denominator.sql"
ph_den <- fetch_data_from_sql_file(philips_den_sql, yaml_file_path)
ph_den$counts_pts

## aberration denominators 
abr_den_sql<- "/workspaces/starr-oncology-data-lake-arpah/src/aug_2025/sql/philips/philips_aberration_denominator.sql"
abr_den <- fetch_data_from_sql_file(abr_den_sql, yaml_file_path)
abr_den
```
```{r, message=FALSE, warning=FALSE, results='hide'}
test_sql="/workspaces/starr-oncology-data-lake-arpah/src/aug_2025/sql/philips/philips_tests_ordered.sql"
test_type=fetch_data_from_sql_file(test_sql, yaml_file_path)

test_date_sql="/workspaces/starr-oncology-data-lake-arpah/src/aug_2025/sql/philips/philips_tests_date_ordered.sql"
test_date=fetch_data_from_sql_file(test_date_sql, yaml_file_path)

test_type=test_type %>% inner_join(test_date, by="test_type")
test_type=test_type %>% mutate(test_type=ifelse(test_type=="StanfordStampTest", "Stanford Stamp Test", "Foundation One Ckb Test"))%>%
  mutate(
    min_order_ym = format(min_order_date, "%Y-%m"),
    max_order_ym = format(max_order_date, "%Y-%m")
  )

```

```{r, message=FALSE, warning=FALSE, results='hide'}
test_year_sql="/workspaces/starr-oncology-data-lake-arpah/src/aug_2025/sql/philips/philips_tests_date_ordered_year.sql"
test_year=fetch_data_from_sql_file(test_year_sql, yaml_file_path)
```


### Summary:

Philips IntelliSpace Precision Medicine (ISPM) includes genomics database at Stanford.
This data is geared towards identifying genetic mutations that can be targeted for precision medicine, with the goal of improving therapeutic outcomes through personalized treatment strategies.
As of August 2025, `r format(sum(test_type$test_type_counts), big.mark=",")` STAMP tests were ordered for `r format(ph_den$counts_pts[1], big.mark = ",")` patients. 


```{r, message=FALSE, warning=FALSE}
labels <- c(
  "test_type"="Test Types",
  "test_type_counts" = "N_Case",
   "min_order_ym" = "Min_Date",
   "max_order_ym"= "Max_Date"
)

create_gt_table_v1(
  data = test_type, 
  columns = c( "test_type","test_type_counts", "min_order_ym", "max_order_ym"), 
  labels = labels, 
   subtitle_text = "",
  footnote_text = paste0("Total number of ordered tests: ", format(sum(test_type$test_type_counts)
, big.mark = ",") ))
```


```{r time trend plot, message=FALSE, warning=FALSE, include=FALSE}
# Create ggplot with hover

p <- ggplot(test_year, aes(x = order_year, y = n_orders, color = test_type, group = test_type)) +
  geom_point(aes(
    text = paste0(
      "Year: ", order_year,
      "<br>n_ordered: ", n_orders,
      if ("ratio" %in% names(test_year)) paste0("<br>Ratio: ", round(ratio, 3)) else ""
    )
  ), size = 3) +
  geom_smooth(method = "loess", linewidth = 0.5, alpha = 0.7, se = FALSE) +
  #geom_vline(xintercept = 2018, linetype = "dashed", color = "grey", size = 0.5) +
  theme_minimal() +
  labs(
    title = "Tests Ordered Over Time",
    x = "Year",
    y = "Number of Orders",
    color = NULL
  ) +
  theme(
    legend.position = "bottom",
    legend.title = element_blank(),
    strip.text = element_text(size = 12, face = "bold"),
    strip.background = element_rect(fill = "white", color = "gray80")
  )

# Convert to interactive plot with hover
ggplotly(p, tooltip = "text")


```

**Note**: Additional FoundationOne (F1) test data was backfilled between the May release and the Philips export dated from 07/13/25 to 08/05/25, which was used for the August release. More data is expected in future releases

### Source Queries:
The queries related to the following analysis can be accessed [here](/workspaces/starr-oncology-data-lake-arpah/src/aug_2025/sql/philips). 
The queries related to the following tables and graphs can be found [here](/workspaces/starr-oncology-data-lake-arpah/src/aug_2025/philips_metrics.qmd).

```{r, message=FALSE, warning=FALSE}
library(dplyr)

# Combine years before 2018
test_year_bar <- test_year %>%
  mutate(order_year = ifelse(order_year < 2018, "<2018", as.character(order_year))) %>%
  group_by(order_year, test_type) %>%
  summarise(
    n_orders = sum(n_orders),
    .groups = "drop"
  )

# Bar plot with combined years
p_bar <- ggplot(test_year_bar, aes(x = factor(order_year, levels = c("<2018", sort(unique(test_year$order_year))[sort(unique(test_year$order_year)) >= 2018])), 
                                   y = n_orders, fill = test_type, group = test_type)) +
  geom_bar(
    aes(
      text = paste0(
        "Year: ", order_year,
        "<br>n_ordered: ", n_orders
      )
    ),
    stat = "identity", position = position_dodge(width = 0.8), width = 0.7
  ) +
  scale_fill_brewer(palette = "Set1") +
  theme_minimal() +
  labs(
    title = "Number of Tests Ordered per Year ",
    x = "Year",
    y = "Number of Orders",
    fill = NULL
  ) +
  theme(
    legend.position = "bottom",
    legend.title = element_blank(),
    strip.text = element_text(size = 12, face = "bold"),
    strip.background = element_rect(fill = "white", color = "gray80")
  )

ggplotly(p_bar, tooltip = "text")
```

```{r, message=FALSE, warning=FALSE, results='hide'}
pathg_sql<- "/workspaces/starr-oncology-data-lake-arpah/src/aug_2025/sql/philips/philips_abr_pathg.sql"
pathg <- fetch_data_from_sql_file(pathg_sql, yaml_file_path)
pathg=pathg %>% filter (!is.na(stanford_pathogenicity))

```

::: {.columns}

::: {.column width="50%"}
### ðŸ§¬ Data Components 
- Diagnoses Orders: includes patients who had the test ordered
- Aberration: records if a genetic aberration is found in the STAMP panel tests
:::


::: {.column width="50%"}
### ðŸ“Š Data Volume 
- Patients Count: `r format(ph_den$counts_pts[1], big.mark = ",")`
- Patients with Aberration Cases: `r format(abr_den$n_pts, big.mark = ",")`
- Patients with Pathogenic Cases: `r format(pathg$n_pts[pathg$stanford_pathogenicity=="Pathogenic"], big.mark = ",")`


:::


## Aberration Metrics: {.tabset}
The aberration table provides a structured overview of genetic changes, categorizing them into specific types and broader classes. Each entry in the table includes the following key components:

- **Aberration Types:** An aberration type describes a specific change to DNA. These are specific alterations in DNA that can affect gene function and contribute to various diseases. Each type represents a distinct change, such as missense variant, deletions, duplications, or point mutations.


- **Chromosomes:** This field indicates the chromosomal location of the gene associated with the aberration. For example if a gene is located on chromosome 17, it will be presented as "chr17".

- **HGNC Gene and Detected Mutations:** The HGNC (HUGO Gene Nomenclature Committee) provides standardized names for human genes. Detected mutations refer to specific changes found in these genes that may be important for specific therapies, such as gene therapy or personalized medicine.

::: {.panel-tabset}


```{r,message=FALSE, warning=FALSE, results='hide' }
site_sql<-"/workspaces/starr-oncology-data-lake-arpah/src/aug_2025/sql/philips/philips_site_display.sql"
site <- fetch_data_from_sql_file(site_sql, yaml_file_path)

```


### All Cancer Types
The following analysis displays the genes distribution of positive aberration above 200 cases. 

```{r,message=FALSE, warning=FALSE , results='hide'}
gene_ch_sql<-"/workspaces/starr-oncology-data-lake-arpah/src/aug_2025/sql/philips/philips_chrom_genes.sql"
gene_ch <- fetch_data_from_sql_file(gene_ch_sql, yaml_file_path)

# Calculate percentages using the denominator
gene_ch <- gene_ch %>%
  mutate(pts_percent = round((n_pts/as.numeric(ph_den$counts_pts))*100, 1))
```

```{r,message=FALSE, warning=FALSE , results='hide'}
gene_sql<-"/workspaces/starr-oncology-data-lake-arpah/src/aug_2025/sql/philips/philips_gene.sql"
gene<- fetch_data_from_sql_file(gene_sql, yaml_file_path)

# Calculate percentages using the denominator
gene <- gene %>%
  mutate(pts_percent = round((n_pts/as.numeric(abr_den$n_pts))*100, 1))
```

::: {.panel-tabset}

### Barplot
HGNC Gene Distribution:

```{r plot 1,message=FALSE, warning=FALSE}
## explain the top genes 
## table filtering count>10
df_bar <- gene %>%
  filter(n_pts > 200) %>%
  arrange(desc(n_pts)) %>% mutate(hgnc_gene = forcats::fct_reorder(hgnc_gene, n_pts))

plot_ly(df_bar,
        y = ~reorder(hgnc_gene, n_pts),
        x = ~n_pts,
        type = "bar",
        color = ~hgnc_gene,
        colors = "Set3") %>%
  layout(    showlegend = FALSE,
xaxis = list(title = "Person Count"),
         yaxis = list(title = "")) %>%layout (title = "HGNC Gene Distribution")

```

## Summary Table of HGNC Gene Distribution
```{r table1, message=FALSE, warning=FALSE }
# Update the datatable to include percentage
DT::datatable(
  gene %>% filter(n_pts>10) %>%
    select(hgnc_gene, n_pts, pts_percent) %>%
    rename(
      "Gene" = hgnc_gene,
      "Patient Count" = n_pts,
      "Percentage" = pts_percent
    ),
  options = list(
    pageLength = 10,
    order = list(list(1, 'desc')),
    dom = 'ftlip'
  ),
  rownames = FALSE
) %>%
  DT::formatStyle(
    'Patient Count',
    background = DT::styleColorBar(gene$n_pts, 'lightgray'),
    backgroundSize = '98% 88%',
    backgroundRepeat = 'no-repeat',
    backgroundPosition = 'center'
  ) %>%
  DT::formatRound('Percentage', digits = 1)
```


### Heatmap
Genes Distribution by Chromosomes 


```{r heatmap, message=FALSE, warning=FALSE}
library(DT)

# Filter for more significant genes (increased threshold)
filtered_gene_ch <- gene_ch %>%
  filter(!is.na(hgnc_gene), n_pts > 200) %>%  # Increased threshold from 200 to
  mutate(
    chrom = factor(chrom, 
                  levels = paste0("chr", c(1:22, "X", "Y")),
                  ordered = TRUE)
  ) %>%
  arrange(chrom, desc(n_pts))

p <- ggplot(filtered_gene_ch, 
     aes(x = 1, 
         y = reorder(hgnc_gene, n_pts), 
         fill = n_pts,
         text = sprintf(
           "Gene: %s<br>Patient Count: %d<br>Chromosome: %s",
           hgnc_gene, n_pts, chrom
         ))) +
  geom_tile(aes(width = 0.95,  # Fixed width for more consistent look
                height = 0.8)) +
  facet_wrap(~chrom, scales = "free_y", ncol = 4) +  
  scale_fill_distiller(name = "Patient Count", 
                      palette = "Set3", 
                      direction = 1) +
  theme_minimal() +
  labs(title = "Gene Distribution by Chromosome",
       subtitle = "Showing genes with >200 patients",
       y = "Gene",
       x = NULL) +
  theme(
    axis.text.x = element_blank(),
    axis.ticks = element_blank(),
    panel.grid = element_blank(),
    strip.text = element_text(face = "", size = 10),
    strip.background = element_rect(fill = "gray95"),
    legend.position = "right",
    panel.spacing = unit(0.4, "cm"),
    axis.text.y = element_text(size = 8),  # Smaller text for gene names
    plot.title = element_text(size = 14),
    plot.subtitle = element_text(size = 10, color = "gray40")
  )

# Make it interactive with custom hover
ggplotly(p, 
         tooltip = "text",
         height = 900,  # Increased height
         width = 800) %>%  # Increased width
  layout(
    margin = list(l = 150, r = 50, b = 50, t = 80),
    showlegend = TRUE
  ) %>%
  config(displayModeBar = FALSE)  # Remove the plotly toolbar
```



:::

## Distribution of Genes by Aberration Type 

```{r, message=FALSE, warning=FALSE, results='hide'}
mu_type_sql<-"/workspaces/starr-oncology-data-lake-arpah/src/aug_2025/sql/philips/philips_abr_type.sql"
mutation_data <- fetch_data_from_sql_file(mu_type_sql, yaml_file_path)
mutation_data=mutation_data %>% filter(n_pts>200) 
```

```{r, message=FALSE, warning=FALSE}
gene_order <- mutation_data %>%
  group_by(aberration_type) %>%
 mutate(total = sum(n_pts))
```

```{r, message=FALSE, warning=FALSE, results='hide'}
gene_order <- mutation_data %>%
  group_by(hgnc_gene) %>%
  mutate(total_pts = sum(n_pts)) %>%
  ungroup() %>%
  filter(n_pts > 100) %>%
  arrange((total_pts)) %>%
  mutate(
    # Order genes by total patient count
    hgnc_gene = factor(hgnc_gene, levels = unique(hgnc_gene)),
    # Order aberration types by their total counts
    aberration_type = forcats::fct_reorder(aberration_type, n_pts, sum)
  )

plot_ly(
  gene_order,
  y = ~hgnc_gene,  # No need for fct_reorder here since we pre-ordered
  x = ~n_pts,
  type = "bar",
  color = ~aberration_type,
  colors = "Set3"
) %>%
  layout(
    barmode = 'stack',
    yaxis = list(
      title = "Gene",
      automargin = TRUE,  # Ensure labels aren't cut off
      tickfont = list(size = 10)
    ),
    xaxis = list(
      title = "Patient Count",
      tickfont = list(size = 10)
    ),
    title = "Mutation Type Distribution Across Genes",
    legend = list(
      orientation = "h", 
      y = -0.2, 
      x = 0.5, 
      xanchor = "center"
    ), showlegend = TRUE,
    height = 1000,  # Increased height for better readability
    margin = list(l = 150, r = 50, t = 50, b = 100)  # Adjusted margins
  )
```
 
```{r mutation type plot, message=FALSE, warning=FALSE}
gene_order %>% 
  plot_ly(
    x = ~aberration_type,
    y = ~hgnc_gene,
    z = ~n_pts,
    type = "heatmap",
    colors = colorRamp(brewer.pal(9, "Set3")),
    hovertemplate = paste(
      "<b>Gene:</b> %{y}<br>",
      "<b>Mutation:</b> %{x}<br>",
      "<b>Count:</b> %{z}<br>",
      "<extra></extra>"
    ),
    colorbar = list(title = "Patient Count")
  ) %>%
  layout(
    title = "Mutation Type Distribution Across Genes",
    xaxis = list(title = "Mutation Type"),
    yaxis = list(title = "Gene")
    )
  
```

### Thoracic Cancer 
Thoracic cancer patients are identified based on their primary site descriptions in the Neural Frame diagnoses data, which include diagnoses of lung, bronchus, or thymus cancers.

```{r, message=FALSE, warning=FALSE, results='hide'}
sql_thr<-"/workspaces/starr-oncology-data-lake-arpah/src/aug_2025/sql/scr/thoracic/scr_thoracic_denominator.sql"

thr_den=fetch_data_from_sql_file(sql_thr, yaml_file_path)
thr_den

sql_thr_abr<-"/workspaces/starr-oncology-data-lake-arpah/src/aug_2025/sql/philips/philips_thr_abr.sql"
thr_abr=fetch_data_from_sql_file(sql_thr_abr, yaml_file_path)
thr_abr
```

From `r format(thr_den$unique_thoracic_cancer_pts, big.mark = ",")` unique thoracic patients, `r format(thr_abr$n_pts[thr_abr$flag=="total"], big.mark = ",")` patients were included in Philips ISPM database with `r format(thr_abr$n_pts[thr_abr$flag=="abr"], big.mark = ",")` aberration cases. 

```{r, message=FALSE, warning=FALSE, results='hide'}
sql_thr_genes<-"/workspaces/starr-oncology-data-lake-arpah/src/aug_2025/sql/philips/philips_thr_abr_genes.sql"

thr_gene=fetch_data_from_sql_file(sql_thr_genes, yaml_file_path)
thr_gene= thr_gene %>% filter (!is.na(stanford_pathogenicity))
thr_gene

thr_path=thr_gene %>% filter (!stanford_pathogenicity=="Unknown significance")
```

## Distribution of Gene Types by Pathogenicity
```{r, message=FALSE, warning=FALSE}
# Prepare the data
pathg_genes <- thr_path %>%
  group_by(hgnc_gene, stanford_pathogenicity) %>%
  group_by(hgnc_gene) %>%
  mutate(
    total_pts = sum(n_pts)
  ) %>%  filter(total_pts > 30) %>%
  ungroup() %>%
  arrange((desc(total_pts)))

# Create interactive stacked bar plot
plot_ly() %>%
  add_bars(
    data = pathg_genes,
    y = ~reorder(hgnc_gene, total_pts),
    x = ~n_pts,
    color = ~factor(stanford_pathogenicity),
    colors = RColorBrewer::brewer.pal(5, "Set3"),
    hovertemplate = paste(
      "<b>Gene:</b> %{y}<br>",
      "<b>Count:</b> %{text}<br>",
      "<extra></extra>"
    ),
    text = ~n_pts, showlegend = TRUE
  ) %>%
  layout(
    title = "Distribution of Pathogenicity Types by Gene",
    barmode = "stack",
    yaxis = list(
      title = "Gene"
    ),
    xaxis = list(
      title = "Number of Patients"
    ),
    legend = list(
      title = list(text = "Pathogenicity"),
      orientation = "v",
      #y = -0.2,
      #x = 0.5,
      xanchor = "center"
    ),showlegend = TRUE
  )
```
## KRAS Mutations
The KRAS gene is a critical component in cell signaling pathways that regulate cell growth and division, and mutations in this gene are frequently associated with various cancers including thoracic cancers.
Among patients with thoracic cancer with mutations in the KRAS gene, the most common amino acid alterations occurring are listed as follow:
```{r kras load, message=FALSE, warning=FALSE, results='hide'}
sql_thr_kras<-"/workspaces/starr-oncology-data-lake-arpah/src/aug_2025/sql/philips/philips_thr_kras.sql"
thr_kras=fetch_data_from_sql_file(sql_thr_kras, yaml_file_path)
thr_kras
table(thr_kras$flag)
thr_kras=thr_kras%>% arrange(desc(n_pts))

```
```{r kras plot, message=FALSE, warning=FALSE}
library(plotly)
library(dplyr)
library(RColorBrewer)

thr_kras_filtered <- thr_kras %>% filter(n_pts > 10)

# Get the Set3 color palette
color_palette <- brewer.pal(n = 5, name = "Set3")

plot_ly(data = thr_kras_filtered,
        y = ~reorder(stanford_hgvs_coding, n_pts),
        x = ~n_pts,
        color = ~flag,
        type = "bar",
        colors = color_palette,
        hovertemplate = paste(
          "<b>HGVS:</b> %{y}<br>",
          "<b>Count:</b> %{x}<br>",
          "<extra></extra>"
        ),
        customdata = ~flag,
        text = ~n_pts,
        textposition = "inside",
        insidetextanchor = "start",
        orientation = "h") %>%
  layout(barmode = "group",
         title = "KRAS Mutations: Patient Count Distribution by HGVS and Amino Acid",
         xaxis = list(title = "Patient Count"),
         yaxis = list(title = ""),
         margin = list(l = 150, r = 50, t = 80, b = 80),
         legend = list(x = 0.8, y = 0.9))


```


:::
