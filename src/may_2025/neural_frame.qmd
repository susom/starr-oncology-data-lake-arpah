---
title: "Neural Frame Metrics"
execute:
  echo: false
---
```{r, message=FALSE, warning=FALSE, results='hide'}
#| context: global

rm(list=ls())
source("/workspaces/starr-oncology-data-lake-arpah/src/R/all_function.R", encoding = "UTF-8")
yaml_file_path <-  "/workspaces/starr-oncology-data-lake-arpah/src/sql_params.yml"
library(RColorBrewer)  # Add RColorBrewer package
```
```{r, message=FALSE, warning=FALSE, results='hide'}
sql_den<- "/workspaces/starr-oncology-data-lake-arpah/src/sql/scr/thoracic/scr_den.sql"
nf_den <- fetch_data_from_sql_file(sql_den, yaml_file_path)
nf_den
```

```{r,message=FALSE, warning=FALSE, results='hide'}
sql_nf<- "/workspaces/starr-oncology-data-lake-arpah/src/sql/scr/thoracic/scr_case_status.sql"
case <- fetch_data_from_sql_file(sql_nf, yaml_file_path)
head(case)
case$nfcasestatus[case$nfcasestatus=="Incomplete - Edit"]<-"Incomplete"
case$flag="All Cancer"
```
### Neural Frame Summary:
The Stanford Cancer Registry data is integrated with the California Cancer Registry and updated monthly, encompassing approximately 800 variables related to various cancers. As of January 2022, the KACIÂ® application from NeuralFrame was approved for abstracting and transmitting diagnosed cases, with Stanford adopting it in 2023. NeuralFrame connects to EPIC to extract relevant data, including pathology notes.

Within Neural Frame, Class of Case (CoC) divides cases into two groups: cancer cases are categorized as **Analytic** (reportable with complete data) or **Non-analytic** (not reportable by law, with complete data only from 2022 onward).

 - **Analytic**: Analytic cases include patients with initial diagnoses and full or partial treatments at Stanford. (codes 00-22).Analytic cases (codes 00-22) are those that are required by CoC to be abstracted because of the programâ€™s primary responsibility in managing the cancer. Analytic cases are grouped according to the location of diagnosis and treatment. Treatment and outcome reports may be limited to analytic cases. 

 - **Non-analytic**: Non-analytic cases include recurrences, consults only, and in-transit patients. Nonanalytic cases (codes 30-49 and 99) may be abstracted by the facility to meet central registry requirements or because of a request by the facilityâ€™s cancer program. Nonanalytic cases are grouped according to the reason a patient who received care at the facility is nonanalytic, or the reason a patient who never received care at the facility may have been abstracted.

::: {.columns}

::: {.column width="50%"}
### ðŸ“Š Data Volume 
- Patients Count:  `r format(nf_den$unique_person_count[1], big.mark = ",")`
- Patients with Complete Cases: `r format(case$unique_person_count_case[case$nfcasestatus=="Completed"], big.mark = ",")`
:::

::: {.column width="50%"}
### ðŸ§¬ Data Components 
- Outcome
- Diagnoses 
- Treatment
- Miscellaneous
:::

```{r, message=FALSE, warning=FALSE, results='hide'}
sql_nf<- "/workspaces/starr-oncology-data-lake-arpah/src/sql/scr/thoracic/scr_case_status.sql"
case <- fetch_data_from_sql_file(sql_nf, yaml_file_path)
head(case)
case$nfcasestatus[case$nfcasestatus=="Incomplete - Edit"]<-"Incomplete"
case$flag="All Cancer"

# Calculate counts and percentages using unique person counts
case_summary <- aggregate(unique_person_count_case ~ nfcasestatus, data = case, sum)
case_df <- data.frame(
  Status = case_summary$nfcasestatus,
  Count = case_summary$unique_person_count_case,
  Percentage = round(case_summary$unique_person_count_case / 197000 * 100, 2)
)

# Sort by percentage in descending order
case_df <- case_df[order(-case_df$Percentage), ]
```
```{r, message=FALSE, warning=FALSE, results='hide'}
# Create interactive table using DT
library(DT)
library(ggplot2)

# Display table
datatable(case_df, 
          colnames = c("Case Status", "Unique Person Count", "Percentage (%)"),
          options = list(
            pageLength = 25,  # increased to show more rows per page
            searching = FALSE,
            ordering = TRUE,
            dom = 'rtip'
          ),
          rownames = FALSE
)
```





## Neural Frame Metric Summary {.tabset}
This visualization summarizes the characteristics of complete cases for:

 - Thoracic Cancer
 - 
 - 

::: {.panel-tabset}

### Thoracic Cancer  
Thoracic cancer patients are identified based on their primary site descriptions in the Neural Frame diagnoses data, which include diagnoses of lung, bronchus, or thymus cancers.



## Case Status
```{r, message=FALSE, warning=FALSE, results='hide'}
sql_thr_case<- "/workspaces/starr-oncology-data-lake-arpah/src/sql/scr/thoracic/scr_thoracic_case_status_person_metrics.sql"
thr_case <- fetch_data_from_sql_file(sql_thr_case, yaml_file_path)
head(thr_case)
thr_case$flag="Thoracic Cancer"
thr_case$nfcasestatus[thr_case$nfcasestatus=="Incomplete - Edit"]<-"Incomplete"


sql_thr<-"/workspaces/starr-oncology-data-lake-arpah/src/sql/scr/thoracic/scr_thoracic_denominator.sql"

thr_den=fetch_data_from_sql_file(sql_thr, yaml_file_path)
thr_den
```
```{r,message=FALSE, warning=FALSE, results='hide'}
# Calculate counts and percentages using unique person counts
case_summary_thr <- aggregate(patient_count ~ nfcasestatus, data = thr_case, sum)
case_thr <- data.frame(
  Status = case_summary_thr$nfcasestatus,
  Count = case_summary_thr$patient_count,
  Percentage = round(case_summary_thr$patient_count / (thr_den$unique_thoracic_cancer_pts) * 100, 2)
)

```

As of May 2025, there are  `r format(thr_den$unique_thoracic_cancer_pts, big.mark = ",")` unique thoracic patients with `r format(case_thr$Percentage[case_thr$Status=="Completed"], big.mark = ",")` % complete cases. 

(Solomon to define the cohort)



```{r, message=FALSE, warning=FALSE}
# Create pie chart
ggplot(case_thr, aes(x = "", y = Percentage, fill = Status)) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar("y", start = 0) +
  theme_minimal() +
  theme(
    axis.title.x = element_blank(),
    axis.title.y = element_blank(),
    panel.border = element_blank(),
    panel.grid = element_blank(),
    axis.ticks = element_blank(),
    axis.text.x = element_blank()
  ) +
  geom_text(aes(label = paste0(Status, "\n", Percentage, "%")), 
            position = position_stack(vjust = 0.5)) +
  ggtitle("Case Status Distribution") +
  scale_fill_brewer(palette = "Set3")
```

## Patient Summary by Diagnosis Year 
```{r, message=FALSE, warning=FALSE, results='hide'}
sql_thr_yr<- "/workspaces/starr-oncology-data-lake-arpah/src/sql/scr/thoracic/scr_thoracic_completed_cases_dx_year_person_metrics.sql"
thr_yr <- fetch_data_from_sql_file(sql_thr_yr, yaml_file_path)

# Group years before 2000 and calculate percentages
thr_yr_grouped <- thr_yr %>%
  mutate(dx_year = as.character(ifelse(dx_year < 2000, "<2000", dx_year))) %>%
  group_by(dx_year) %>%
  summarize(patient_count = sum(patient_count)) %>%
  mutate(percentage = round(100 * patient_count / sum(patient_count), 1),
         label = paste0(percentage, "%")) %>%
  arrange(dx_year)
```
```{r, message=FALSE, warning=FALSE}
library(plotly)

# Create an interactive bar plot using plotly
p <- plot_ly(data = thr_yr_grouped,
             x = ~dx_year,
             y = ~patient_count,
             type = "bar",
             text = ~label,
             textposition = "auto",
             marker = list(color ="#FB8072" ))  

# Add layout settings
p <- p %>% 
  layout(
    title = list(text = "Number of Thoracic Cancer Patients by Diagnosis Year"),
    xaxis = list(
      title = "Diagnosis Year",
      tickangle = 45
    ),
    yaxis = list(
      title = "Patient Count"
    ),
    showlegend = FALSE
  )

# Display the plot
p
```

## Histology Distribution
Thoracic cancer encompasses a diverse group of histologic subtypes, with Non-Small Cell Lung Cancer **(NSCLC)** representing the majority of cases and Small Cell Lung Cancer **SCLC**.
The major NSCLC types include:

Non-Small Cell Lung Cancer **(NSCLC)**:

- Adenocarcinoma (8140â€“8384): The code 8140/3 corresponds to "Adenocarcinoma, NOS" and is widely used for lung adenocarcinomas. The range 8140â€“8384 encompasses various adenocarcinoma subtypes, including mucinous and papillary variants. â€‹(SEER)

- Squamous Cell Carcinoma (8050â€“8084): Codes within this range, such as 8070/3 for "Squamous cell carcinoma, NOS," are appropriate for squamous cell carcinomas of the lung. â€‹

- Large Cell Carcinoma (8012â€“8014): Code 8012/3 denotes "Large cell carcinoma, NOS," which is applicable to this category. â€‹


- Non-Small Cell Carcinoma, NOS (8046): Code 8046/3 is used when a tumor is identified as non-small cell carcinoma without further specification. â€‹(SEER)

Small Cell Lung Cancer **(SCLC)**

Squamous Cell Carcinoma (8050â€“8084), Large Cell Carcinoma (8012â€“8014), and Non-Small Cell Carcinoma, Not Otherwise Specified (NOS) (8046). Small Cell Lung Cancer (SCLC) is a distinct category, comprising Small Cell Carcinoma (8041) and other related small cell histologies (8040â€“8045). Additionally, neuroendocrine tumors of the lung include Carcinoid Tumors (8240â€“8249) and Large Cell Neuroendocrine Carcinoma (8013), each with unique clinical and prognostic implications. Less common subtypes fall under "Other Types," including Sarcomas (8800â€“8921), Mesotheliomas (9050â€“9055), and various unspecified or rare histologies, which are grouped together for completeness and often require individual clinical review.

```{r, message=FALSE, warning=FALSE, results='hide'}
# Load required libraries
library(plotly)
library(dplyr)
library(RColorBrewer)
library(htmlwidgets)

sql_thr_his <- "/workspaces/starr-oncology-data-lake-arpah/src/sql/scr/thoracic/scr_thoracic_completed_cases_histology_person_metrics.sql"
thr_his <- fetch_data_from_sql_file(sql_thr_his, yaml_file_path)

# Add histology grouping
thr_his <- thr_his %>%
  mutate(histology_group = case_when(
    # Non-Small Cell Lung Cancer (NSCLC) Groups
    between(as.numeric(histologicTypeIcdO3), 8140, 8384) ~ 'Adenocarcinoma',
    between(as.numeric(histologicTypeIcdO3), 8050, 8084) ~ 'Squamous Cell Carcinoma',
    between(as.numeric(histologicTypeIcdO3), 8012, 8014) ~ 'Large Cell Carcinoma',
    histologicTypeIcdO3 == '8046' ~ 'Non-Small Cell Carcinoma NOS',
    
    # Small Cell Lung Cancer (SCLC)
    histologicTypeIcdO3 == '8041' ~ 'Small Cell Carcinoma',
    between(as.numeric(histologicTypeIcdO3), 8040, 8045) ~ 'Small Cell Types',
    
    # Neuroendocrine Tumors
    between(as.numeric(histologicTypeIcdO3), 8240, 8249) ~ 'Carcinoid Tumor',
    histologicTypeIcdO3 == '8013' ~ 'Large Cell Neuroendocrine',
    
    # Other specified types
    between(as.numeric(histologicTypeIcdO3), 8800, 8921) ~ 'Sarcoma',
    between(as.numeric(histologicTypeIcdO3), 9050, 9055) ~ 'Mesothelioma',
    
    # NOS and others
    TRUE ~ 'Other/Not Specified'
  ))
```
```{r, message=FALSE, warning=FALSE}
# Create main summary
hist_summary <- thr_his %>%
  group_by(histology_group) %>%
  summarize(patient_count = sum(patient_count)) %>%
  mutate(percentage = round(100 * patient_count/sum(patient_count), 1)) %>%
  arrange(desc(patient_count))

# Create the main pie chart
p <- plot_ly() %>%
  add_pie(data = hist_summary,
          labels = ~histology_group,
          values = ~patient_count,
          textposition = 'inside',
          textinfo = 'label+percent',
          hoverinfo = 'text',
          text = ~paste(histology_group, 
                       '\nCount:', patient_count,
                       '\nPercentage:', percentage, '%'),
          marker = list(colors = brewer.pal(12, "Set3"))) %>%
  layout(title = "Distribution of Thoracic Cancer Histology Types",
         showlegend = TRUE,
         legend = list(orientation = "h", x = 0.5, xanchor = "center", y = -0.1))

# Create detailed subtype plot (initially hidden)
subtype_data <- thr_his %>%
  group_by(histology_group, histologicTypeIcdO3Description) %>%
  summarize(patient_count = sum(patient_count)) %>%
  mutate(percentage = round(100 * patient_count/sum(patient_count), 1))

# Add event handling for switching between views
p <- onRender(p, "
  function(el, x) {
    var mainPlot = x.mainPlot;
    var currentView = 'pie';
    
    el.on('plotly_click', function(d) {
      var pt = d.points[0];
      if (currentView === 'pie') {
        var selectedGroup = pt.label;
        var filteredData = x.subgroups[selectedGroup];
        
        if (filteredData) {
          currentView = 'bar';
          Plotly.newPlot(el, [{
            type: 'bar',
            x: filteredData.x,
            y: filteredData.y,
            text: filteredData.text,
            textposition: 'auto',
            marker: {color: x.colors[0]}
          }], {
            title: 'Detailed View: ' + selectedGroup + ' (Click anywhere on the chart to return)',
            xaxis: {
              title: 'Histologic Type',
              tickangle: 45
            },
            yaxis: {title: 'Patient Count'},
            showlegend: false
          });
        }
      } else {
        // Return to main pie chart view
        currentView = 'pie';
        Plotly.newPlot(el, mainPlot.data, mainPlot.layout);
      }
    });
  }
")

# Prepare subgroup data
subgroups <- lapply(unique(thr_his$histology_group), function(group) {
  data <- subtype_data %>%
    filter(histology_group == group) %>%
    arrange(desc(patient_count))
  
  list(
    x = data$histologicTypeIcdO3Description,
    y = data$patient_count,
    text = paste0(data$patient_count, " (", data$percentage, "%)")
  )
})
names(subgroups) <- unique(thr_his$histology_group)

# Add data to the plot's x parameter
p$x$subgroups <- subgroups
p$x$colors <- brewer.pal(12, "Set3")
p$x$mainPlot <- list(
  data = p$x$data,
  layout = p$x$layout
)

# Display the interactive plot
p
```
```{r, message=FALSE, warning=FALSE}
# Create detailed summary table
thr_his_summary <- thr_his %>%
  group_by(histology_group, histologicTypeIcdO3Description) %>%
  summarize(
    patient_count = sum(patient_count),
    histology_codes = paste(sort(unique(histologicTypeIcdO3)), collapse = ", ")
  ) %>%
  mutate(percentage = round(100 * patient_count/sum(patient_count), 1)) %>%
  arrange(desc(patient_count))

thr_his_summary= thr_his_summary %>% select (histology_group, histologicTypeIcdO3Description, histologicTypeIcdO3, patient_count, percentage)
# Display using DT for interactive table
DT::datatable(thr_his_summary,
              colnames = c("Histology Group", "Original Histology", "ICD-O-3 Codes", "Patient Count", "Percentage (%)"),
              options = list(
                pageLength = 10,
                searching = TRUE,
                ordering = TRUE,
                dom = 'rtip'
              ),
              rownames = FALSE) %>%
  formatRound('percentage', digits = 1)
```
:::
