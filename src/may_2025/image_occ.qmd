---
title: "Image Occurrence"
execute:
  echo: false
---
```{r, message=FALSE, warning=FALSE, results='hide'}
#| context: global

rm(list=ls())
source("/workspaces/starr-oncology-data-lake-arpah/src/R/all_function.R", encoding = "UTF-8")
yaml_file_path <-  "/workspaces/starr-oncology-data-lake-arpah/src/sql_params.yml"

```


```{r, message=FALSE, warning=FALSE, results='hide'}
#| context: global

sql_file_path_image_mod <- "/workspaces/starr-oncology-data-lake-arpah/src/sql/image_occ/image_occ_modality.sql"
res_img_mod <- fetch_data_from_sql_file(sql_file_path_image_mod, yaml_file_path)
head(res_img_mod)
res_img_mod$variable_name<-NULL
colnames(res_img_mod)=c("modality_type", "series_count", "person_count")
```

```{r,  warning=FALSE, results='hide'}
#| context: global

Value <- c("AR", "AS", "ASMT", "AU", "BDUS", "BI", "BMD", "CD", "CF", "CP", 
           "CR", "CS", "CT", "DD", "DF", "DG", "DM", "DOC", "DS", "DX", 
           "EC", "ECG", "EPS", "ES", "FA", "FID", "FS", "GM", "HC", "HD", 
           "IO", "IOL", "IVOCT", "IVUS", "KER", "KO", "LEN", "LP", "LS", 
           "MA", "MG", "MR", "MS", "NM", "OAM", "OCT", "OP", "OPM", "OPR", 
           "OPT", "OPV", "OSS", "OT", "PLAN", "PR", "PT", "PX", "REG", 
           "RESP", "RF", "RG", "RTDOSE", "RTIMAGE", "RTPLAN", "RTRECORD", 
           "RTSTRUCT", "RWV", "SEG", "SM", "SMR", "SR", "SRF", "ST", 
           "STAIN", "TG", "US", "VA", "VF", "XA", "XC")

Description <- c("Autorefraction", "Angioscopy", "Content Assessment Results", 
                 "Audio", "Bone Densitometry (ultrasound)", "Biomagnetic imaging", 
                 "Bone Densitometry (X-Ray)", "Color flow Doppler", 
                 "Cinefluorography", "Colposcopy", "Computed Radiography", 
                 "Cystoscopy", "Computed Tomography", "Duplex Doppler", 
                 "Digital fluoroscopy", "Diaphanography", "Digital microscopy", 
                 "Document", "Digital Subtraction Angiography", "Digital Radiography", 
                 "Echocardiography", "Electrocardiography", 
                 "Cardiac Electrophysiology", "Endoscopy", 
                 "Fluorescein angiography", "Fiducials", "Fundoscopy", 
                 "General Microscopy", "Hard Copy", "Hemodynamic Waveform", 
                 "Intra-Oral Radiography", "Intraocular Lens Data", 
                 "Intravascular Optical Coherence Tomography", 
                 "Intravascular Ultrasound", "Keratometry", 
                 "Key Object Selection", "Lensometry", "Laparoscopy", 
                 "Laser surface scan", "Magnetic resonance angiography", 
                 "Mammography", "Magnetic Resonance", 
                 "Magnetic resonance spectroscopy", "Nuclear Medicine", 
                 "Ophthalmic Axial Measurements", 
                 "Optical Coherence Tomography (non-Ophthalmic)", 
                 "Ophthalmic Photography", "Ophthalmic Mapping", 
                 "Ophthalmic Refraction", "Ophthalmic Tomography", 
                 "Ophthalmic Visual Field", "Optical Surface Scan", 
                 "Other", "Plan", "Presentation State", 
                 "Positron emission tomography (PET)", "Panoramic X-Ray", 
                 "Registration", "Respiratory Waveform", 
                 "Radio Fluoroscopy", "Radiographic imaging (conventional film/screen)", 
                 "Radiotherapy Dose", "Radiotherapy Image", 
                 "Radiotherapy Plan", "RT Treatment Record", 
                 "Radiotherapy Structure Set", "Real World Value Map", 
                 "Segmentation", "Slide Microscopy", "Stereometric Relationship", 
                 "SR Document", "Subjective Refraction", 
                 "Single-photon emission computed tomography (SPECT)", 
                 "Automated Slide Stainer", "Thermography", 
                 "Ultrasound", "Visual Acuity", "Videofluorography", 
                 "X-Ray Angiography", "External-camera Photography")

retired <- c(NA, "Retired", NA, NA, NA, NA, NA, "Retired", "Retired", 
             "Retired", NA, "Retired", NA, "Retired", "Retired", NA, 
             "Retired", NA, NA, NA, "Retired", NA, NA, NA, "Retired", 
             NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, "Retired", 
             "Retired", NA, NA, "Retired", NA, "Retired", NA, 
             "Retired", NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 
             NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 
             NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 
             "Retired", NA)

# Create the data frame
dat_modality <- data.frame(Value, Description, retired, stringsAsFactors = FALSE)

```
### OMOP Image Occurrence:

In the OMOP Common Data Model (CDM), the "Image_occurrence" table provides a structured way to represent medical imaging events and features, bridging the gap between imaging and observational research by integrating image-based measurements into the CDM. 

The OMOP image_occurrence table captures records of medical imaging events at the series level, representing events where one or more related images are acquired as part of a clinical procedure. 

Each record includes metadata such as the modality (e.g., CT, MRI) and the anatomic site of the image. The table maintains foreign key links to the procedure_occurrence and visit_occurrence tables, enabling contextual association with the related clinical procedure and patient encounter. 

At Stanford, this table has been extended to include a link to the note table, allowing integration of imaging data with relevant clinical documentation.

```{r, message=FALSE, warning=FALSE, results='hide'}
## number of pts and number of series 
path_img <- "/workspaces/starr-oncology-data-lake-arpah/src/sql/image_occ/image_occ_person.sql"
pt_img <- fetch_data_from_sql_file(path_img, yaml_file_path)
pt_img
den_series=as.numeric(pt_img$counts)[2]
den_pts=as.numeric(pt_img$counts)[1]
```

As of May 2025, this table included images for  `r format(pt_img$counts[1], big.mark = ",")` patients with `r format(pt_img$counts[2], big.mark = ",")` series. **Series** are defined as individual imaging acquisitions within a study.


```{r, message=FALSE, warning=FALSE, results='hide'}
## basic counts 
sql_file_path_image<- "/workspaces/starr-oncology-data-lake-arpah/src/sql/image_occ/image_occ_basic.sql"
res<- fetch_data_from_sql_file(sql_file_path_image, yaml_file_path)
head(res)
```
::: {.columns}

::: {.column width="40%"}
### Data Volume 
- **>`r format(res$counts[res$flag=="size_gb"], big.mark = ",")` GB** of imaging data 
- Series Count: `r format(res$counts[res$flag=="counts_series"], big.mark = ",")`
- Study UID: `r format(res$counts[res$flag=="counts_study"], big.mark = ",")`
:::

::: {.column width="60%"}
### Data Components 
- `r format(res$counts[res$flag=="counts_modality_type"], big.mark = ",")` Modality types 
- `r format(res$counts[res$flag=="counts_anatomic_type"], big.mark = ",")` Anatomic sites 
:::



## ðŸ“Š Imaging Summary Results {.tabset}
This visualization summarizes distribution of Modality categories and Anatomic sites by series and patient counts 

::: {.panel-tabset}

### Modality 

```{r, message=FALSE, warning=FALSE, results='hide'}
colnames(dat_modality)[1]<-"modality_type"
res_img_mod=res_img_mod %>% left_join(dat_modality,by="modality_type" )
res_img_mod=res_img_mod %>% filter(person_count>10)
res_img_mod$retired<-NULL
```

```{r, message=FALSE, warning=FALSE}
library(plotly)
library(DT)
library(RColorBrewer)
install.packages("forcats")
library(forcats)

df_pie <- res_img_mod %>%
  group_by(modality_type) %>%  filter(series_count>20000)%>%
  arrange(desc(person_count))

plot_ly(df_pie,
        labels = ~modality_type,
        values = ~series_count,
        type = "pie",
        marker = list(colors = RColorBrewer::brewer.pal(n = max(3, nrow(df_pie)), "Set3")),
        textinfo = "label+percent")
```



```{r, message=FALSE, warning=FALSE}
df_bar <- res_img_mod %>% filter(person_count>1000)%>%
  arrange(desc(person_count)) %>% mutate(modality_type = fct_reorder(modality_type, person_count))

plot_ly(df_bar,
        x = ~modality_type,
        y = ~person_count,
        type = "bar",
        color = ~modality_type,
        colors = "Set3") %>%
  layout(xaxis = list(title = "Modality"),
         yaxis = list(title = "Person Count"))
```

```{r, message=FALSE, warning=FALSE}
res_img_mod=res_img_mod %>% mutate(modality_description = paste0(Description, " (", modality_type, ")"))
#res_img_mod$modality_type<-NULL
res_img_mod<-res_img_mod %>% select (Description,modality_type,series_count,person_count)
DT::datatable(as.data.frame(res_img_mod), options = list(scrollX = TRUE, pageLength = 10))%>%
  formatRound(columns = c("person_count", "series_count"), digits = 0)

```

### Anatomic 

```{r, message=FALSE, warning=FALSE, results='hide'}
#| context: global

sql_file_path_image_an <- "/workspaces/starr-oncology-data-lake-arpah/src/sql/image_occ/image_occ_anatomic.sql"
res_ana <- fetch_data_from_sql_file(sql_file_path_image_an, yaml_file_path)
head(res_ana)
res_ana$variable_name<-NULL
colnames(res_ana)=c("anatomic_site", "series_count", "person_count")

```

```{r, message=FALSE, warning=FALSE}
library(plotly)
library(DT)
library(RColorBrewer)
install.packages("forcats")
library(forcats)

res_ana=res_ana %>% filter(series_count>1000)

df_pie_a <- res_ana%>%
  group_by(anatomic_site) %>% filter(series_count>100000)%>%
  arrange(desc(person_count))

plot_ly(df_pie_a,
        labels = ~anatomic_site,
        values = ~series_count,
        type = "pie",
        marker = list(colors = RColorBrewer::brewer.pal(n = max(3, nrow(df_pie)), "Set3")),
        textinfo = "label+percent")
```
```{r, message=FALSE, warning=FALSE}
df_bar <- res_ana %>% filter(person_count>1000)%>%
  arrange(desc(person_count)) %>% mutate(anatomic_site = fct_reorder(anatomic_site, person_count))

plot_ly(df_bar,
        x = ~anatomic_site,
        y = ~person_count,
        type = "bar",
        color = ~anatomic_site,
        colors = "Set3") %>%
  layout(xaxis = list(title = "Anatomic Site"),
         yaxis = list(title = "Person Count"))
```

```{r, message=FALSE, warning=FALSE}
DT::datatable(as.data.frame(res_ana), options = list(scrollX = TRUE, pageLength = 10)) %>%
  formatRound(columns = c("person_count", "series_count"), digits = 0)

```
::: 

