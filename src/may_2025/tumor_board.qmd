---
title: "Tumor Board"
execute:
  echo: false
---
```{r setup, include=FALSE}
rm(list=ls())
source("/workspaces/starr-oncology-data-lake-arpah/src/R/all_function.R", encoding = "UTF-8")
yaml_file_path <- "/workspaces/starr-oncology-data-lake-arpah/src/may_2025/sql_params.yml"
```


### Summary:
As of May 2025, Tumor Board encounters are defined using the EPIC patient encounter data tables.
Specifically, Thoracic Tumor Board patients are identified based on their primary site descriptions in the Neural Frame diagnoses data, which include diagnoses of lung, bronchus, or thymus cancers in addition to having tumor board encounter. 

**Note**: Thoracic Tumor Board definition will be narrowed further due to observations from cross-comparison between encounter data in Epic Hyperspace versus Epic Clarity. 


```{r tb den, message=FALSE, warning=FALSE, results='hide'}

tb_sql <- "/workspaces/starr-oncology-data-lake-arpah/src/may_2025/sql/tumor_board/tumor_board_thoracic_case.sql"
tb_den<- fetch_data_from_sql_file(tb_sql, yaml_file_path)
tb_den
```

```{r, message=FALSE, warning=FALSE, results='hide'}
## basic counts 
sql_thr<- "/workspaces/starr-oncology-data-lake-arpah/src/may_2025/sql/image_occ/image_occ_thoracic/image_occ_person_thr.sql"
res_den_thr<- fetch_data_from_sql_file(sql_thr, yaml_file_path)
head(res_den_thr)
```

As of May 2025, From `r format(res_den_thr$counts[1], big.mark = ",")` patients with thoracic cancer, `r format(tb_den$patient_count[1] big.mark = ",")` also had Tumor Board encounter. 

```{r demographic, message=FALSE, warning=FALSE, results='hide'}
# Parameters
sql_demg <- "/workspaces/starr-oncology-data-lake-arpah/src/may_2025/sql/tumor_board/tumor_board_demographic_all.sql"
df <- fetch_data_from_sql_file(sql_demg, yaml_file_path)
```

```{r, message=FALSE, warning=FALSE, results='hide'}
## demographic table ##
all.dat = df %>%
dplyr::mutate(
    Variable = dplyr::case_when(
      grepl("n_age", description) ~ "Age",
      grepl("n_sex", description) ~ "Sex",
      grepl("n_race", description) ~ "Race",
       grepl("n_ethnicity", description) ~ "Ethnicity",
      grepl("n_patients", description) ~ "Total",
      grepl("pct", description) ~ NA_character_  # Skip pure percent entries for the type
    )) %>%
  select(Variable, everything())
  print(all.dat)
dim(all.dat)
colnames(all.dat)[1]<-"Characteristic"
```


```{r, message=FALSE, warning=FALSE, results='hide'}
library(gt)
all.dat$percents=100*(as.numeric(all.dat$percents))
dplyr::glimpse (all.dat)
all.dat =all.dat %>% mutate(values=c("Total number of pts", "0-17", "18-44", "45-64", "65+",
"No OMOP Visit", "Male", "Female", "Other", "Unknown", "American Indian-Alaska Native",
"Asian", "Native Hawaii", "Black", "White", "Other-Unknown", "Hispanic Latino ", "NOT Hispanic Latino", "Other-Missing" ))

 all.dat=all.dat%>% select(Characteristic, values, everything())
```

### Summary of Patient Population

The demographic categories examined include Age, Sex, Race, and Ethnicity.

```{r, message=FALSE, warning=FALSE}
all.dat=all.dat %>% filter (counts>0)
create_gt_table(
  data = all.dat %>% select(-description),
  columns = c("Characteristic", "values", "counts", "percents"),
  labels = c(
    "Characteristic" = "Characteristic",
    "values" = "",
    "counts" = "Count (N)",
    "percents" = "Percentage (%)"
  ),
  title_text = "Thoracic Tumor Board Encounter",
  subtitle_text = "",
  footnote_text = ""
)
```

### Case Status 
```{r case status, message=FALSE, warning=FALSE, results='hide'}
# Parameters
sql_case <- "/workspaces/starr-oncology-data-lake-arpah/src/may_2025/sql/tumor_board/tumor_board_thoracic_case.sql"
case <- fetch_data_from_sql_file(sql_case, yaml_file_path)
case
```


### Image Occurrence 
```{r image occ, message=FALSE, warning=FALSE, results='hide'}
# Parameters
sql_img <- "/workspaces/starr-oncology-data-lake-arpah/src/may_2025/sql/tumor_board/tumor_board_thoracic_imag_occ.sql"
tb_img<- fetch_data_from_sql_file(sql_img, yaml_file_path)
tb_img
```
As of May 2025, `r format(tb_img$patient_count[1] big.mark = ",")` with tumor board encounter had image occurrence procedures.


## Modality Types
```{r image occ, message=FALSE, warning=FALSE, results='hide'}
# Parameters
sql_img_mod <- "/workspaces/starr-oncology-data-lake-arpah/src/may_2025/sql/tumor_board/tumor_board_thoracic_imag_occ_modality.sql"
tb_img_mod<- fetch_data_from_sql_file(sql_img_mod, yaml_file_path)
tb_img_mod
```


**Note:** The following modality source values without image pixel were excluded from the analysis
SR: Structured Report, REG: Registration, KO: Key Object Selection, PR: Presentation State


```{r, message=FALSE, warning=FALSE, results='hide'}
colnames(tb_img_mod)[1]<-"modality_type"

```


```{r, message=FALSE, warning=FALSE, results='hide'}

df_pie <- tb_img_mod %>%
  group_by(modality_type) %>%  
  filter(series_count > 100) %>%
  arrange(desc(unique_person_count))

plot_ly(
  df_pie,
  labels = ~modality_type,
  values = ~unique_person_count,
  type = "pie",
  text = ~paste(
    "Modality:", modality_type, 
    "<br>Series Count:", format(series_count, big.mark = ","),
    "<br>Patient Count:", format(unique_person_count, big.mark = ",")
  ),
  hoverinfo = "text",
  marker = list(
    colors = RColorBrewer::brewer.pal(n = max(3, nrow(df_pie)), "Set3"),
    line = list(color = 'white', width = 1)  # Add white borders between segments
  ),
  textposition = 'inside',
  textinfo = "label+percent",
  insidetextorientation = 'radial'
) %>%
  layout(
    title = list(
      text = "Distribution of Series and Patients Counts by Modality Type", 
      x = 0.5
    ),
    showlegend = FALSE,  # Remove legend since labels are shown in pie
    margin = list(l = 20, r = 20, t = 50, b = 20),  # Adjust margins
    uniformtext = list(minsize = 12, mode = 'hide'),  # Ensure consistent text size
    clickmode = 'event+select'  # Enable clicking
  ) %>%
  event_register('plotly_click') # Enable click events
```




## Anatomic Sites

```{r, message=FALSE, warning=FALSE, results='hide'}
#| context: global

sql_file_path_image_an <- "/workspaces/starr-oncology-data-lake-arpah/src/may_2025/sql/image_occ/image_occ_anatomic.sql"
res_ana <- fetch_data_from_sql_file(sql_file_path_image_an, yaml_file_path)
head(res_ana)
res_ana$variable_name<-NULL
colnames(res_ana)=c("anatomic_site", "series_count", "person_count")
res_ana=res_ana %>% filter(person_count>10)
```
```{r, message=FALSE, warning=FALSE}
library(dplyr)
library(plotly)
library(DT)

df_bar_sr <- res_ana %>% filter(series_count>5000)%>%
  arrange(desc(series_count)) %>% mutate(anatomic_site = forcats::fct_reorder(anatomic_site, series_count))

plot_ly(df_bar_sr,
        y = ~anatomic_site,
        x = ~series_count,
        type = "bar",
        color = ~anatomic_site,
        colors = "Set3") %>%
  layout(xaxis = list(title = "Series Count"),
         yaxis = list(title = "")) %>%layout (title = "Number of Series per Anatomic Site")

```
## Patient Population 

```{r, message=FALSE, warning=FALSE}
library(forcats)
df_bar <- res_ana %>% filter(person_count>100)%>%
  arrange(desc(person_count)) %>% mutate(anatomic_site = forcats::fct_reorder(anatomic_site, person_count))

plot_ly(df_bar,
        y = ~anatomic_site,
        x = ~person_count,
        type = "bar",
        color = ~anatomic_site,
        colors = "Set3") %>%
  layout(xaxis = list(title = "Person Count"),
         yaxis = list(title = "")) %>%layout (title = "Number of Patients per Anatomic Site")
```
## Anatomic Site Descriptions and Frequency by Series and Patients 

```{r, message=FALSE, warning=FALSE}
library(DT)

res_ana=res_ana %>% select (anatomic_site,series_count,person_count)

DT::datatable(as.data.frame(res_ana), options = list(scrollX = TRUE, pageLength = 10))%>%
  formatRound(columns = c("person_count", "series_count"), digits = 0)

```
### Thoracic Cancer 
Thoracic cancer patients are identified based on their primary site descriptions in the Neural Frame diagnoses data, which include diagnoses of lung, bronchus, or thymus cancers.
```{r, message=FALSE, warning=FALSE, results='hide'}
## basic counts 
sql_thr<- "/workspaces/starr-oncology-data-lake-arpah/src/may_2025/sql/image_occ/image_occ_thoracic/image_occ_person_thr.sql"
res_den_thr<- fetch_data_from_sql_file(sql_thr, yaml_file_path)
head(res_den_thr)
```

As of May 2025, From `r format(res_den_thr$counts[1], big.mark = ",")` patients with thoracic cancer, `r format(res_den_thr$counts[2], big.mark = ",")` had imaging data. 



## Modality Types
Top modality types for series above 500 are listed as follow.
```{r modality thoracic, message=FALSE, warning=FALSE, results='hide'}
## modality
sql_thr_mod<- "/workspaces/starr-oncology-data-lake-arpah/src/may_2025/sql/image_occ/image_occ_thoracic/image_occ_modality_thr.sql"
res_thr<- fetch_data_from_sql_file(sql_thr_mod, yaml_file_path)
head(res_thr)
res_thr
```

```{r modality plot, message=FALSE, warning=FALSE}
# Prepare the data
res_thr <- res_thr %>% filter (series_count>500) %>%
  arrange(desc(series_count)) %>%
  mutate(
    modality_source_value = factor(modality_source_value, levels = unique(modality_source_value)),
    # Calculate percentage of patients
    patient_percentage = round((unique_person_count / max(unique_person_count)) * 100, 1)
  )

# Create the plot
plot <- plot_ly() %>%
  # Add bars for series count
  add_trace(
    data = res_thr,
    x = ~modality_source_value,
    y = ~series_count,
    type = "bar",
    name = "Series Count",
    marker = list(color =  "#8B0000")
  ) %>%
  # Add line for person count
  add_trace(
    data = res_thr,
    x = ~modality_source_value,
    y = ~unique_person_count,
    type = "scatter",
    mode = "lines+markers",
    name = "Person Count",
    yaxis = "y2",
    line = list(color = "gray", width = 2),
    marker = list(color = "gray", size = 8)
  ) %>%
  layout(
    title = "Imaging Modalities: Series Count vs Patient Count",
    xaxis = list(
      title = "Modality Type",
      tickangle = 45
    ),
    yaxis = list(
      title = "Series Count",
      side = "left"
    ),
    yaxis2 = list(
      title = "",
      side = "right",
      overlaying = "y",
      showline = FALSE,          
    showgrid = FALSE           
    ),
    legend = list(x = 0.8, y = 0.9),margin = list(b = 90),
    hovermode = "x unified"
  )

plot
```
## Anatomic Sites 
Top anatomic sites for series above 500 are listed as follow.
```{r, message=FALSE, warning=FALSE, results='hide'}
## anatomic
sql_thr_ana<- "/workspaces/starr-oncology-data-lake-arpah/src/may_2025/sql/image_occ/image_occ_thoracic/image_occ_anatomic._thr.sql"
res_ana_thr<- fetch_data_from_sql_file(sql_thr_ana, yaml_file_path)
head(res_ana_thr)

```
```{r anatomic, message=FALSE, warning=FALSE}
# Prepare the data
res_ana_thr <- res_ana_thr %>% filter (series_count>500) %>%
  arrange(desc(series_count)) %>%
  mutate(
    anatomic_site_source_value = factor(anatomic_site_source_value, levels = unique(anatomic_site_source_value)),
    # Calculate percentage of patients
    patient_percentage = round((unique_person_count / max(unique_person_count)) * 100, 1)
  )

# Create the plot
plot <- plot_ly() %>%
  # Add bars for series count
  add_trace(
    data = res_ana_thr,
    x = ~anatomic_site_source_value,
    y = ~series_count,
    type = "bar",
    name = "Series Count",
    marker = list(color =  "#8B0000")
  ) %>%
  # Add line for person count
  add_trace(
    data = res_ana_thr,
    x = ~anatomic_site_source_value,
    y = ~unique_person_count,
    type = "scatter",
    mode = "lines+markers",
    name = "Person Count",
    yaxis = "y2",
    line = list(color = "gray", width = 2),
    marker = list(color = "gray", size = 8)
  ) %>%
  layout(
    title = "Imaging Anatomic Site: Series Count vs Patient Count",
    xaxis = list(
      title = "Anatomic Sites",
      tickangle = 45
    ),
    yaxis = list(
      title = "Series Count",
      side = "left"
    ),
    yaxis2 = list(
      title = "",
      side = "right",
      overlaying = "y",
      showline = FALSE,          
    showgrid = FALSE  
    ),
    legend = list(x = 0.8, y = 0.9),
    margin = list(b = 90),  # Add bottom margin for rotated labels
    hovermode = "x unified"
  )

plot
```
:::

